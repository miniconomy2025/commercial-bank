name: Deploy Backend

on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - "server/**"
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Write server.key from secret
        run: |
          mkdir -p ./server
          echo "${{ secrets.SERVER_PKEY }}" > ./server/server.key
          chmod 600 ./server/server.key

      - name: Copy files to EC2 with scp
        uses: appleboy/scp-action@v1
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "./server/"
          target: "/home/${{ vars.EC2_USER }}/cb-api-server/"
          rm: true

      - name: Run remote commands on EC2 and Configure Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            API_DOMAIN="${{ vars.API_DOMAIN }}"
            CERTBOT_EMAIL="${{ secrets.CERTBOT_EMAIL }}"
            APP_DIR="/home/${{ vars.EC2_USER }}/cb-api-server/server"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            echo "--- Deploying to EC2: $(pwd) ---"

            # Install NVM and Node.js 22.13.0
            export NVM_DIR="$HOME/.nvm"
            if [ ! -d "$NVM_DIR" ]; then
              echo "Installing NVM..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            fi
            source "$NVM_DIR/nvm.sh"

            if ! node -v | grep -q "v22.13.0"; then
              echo "Installing Node.js v22.13.0..."
              nvm install 22.13.0
              nvm alias default 22.13.0
              nvm use 22.13.0
            fi

            # Ensure PM2 is installed
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi

            echo "Writing environment variables to .env..."
            cat <<EOF > "$APP_DIR/.env.production"
            NODE_ENV=production
            PORT=3000
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            CA_CERT_PATH=ca.crt
            SERVER_KEY_PATH=server.key
            SERVER_CERT_PATH=server.crt
            TIMEOUT=6000
            EOF

            # Install app dependencies
            echo "Installing app dependencies..."
            npm ci

            # Build the app
            echo "Building the app..."
            npm run build

            # --- NGINX SETUP ---
            echo "--- Configuring Nginx ---"
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo yum install -y nginx
              sudo systemctl enable nginx
            fi

            echo "Configuring 'server_names_hash_bucket_size'..."
            if ! grep -q "server_names_hash_bucket_size" /etc/nginx/nginx.conf; then
              sudo sed -i '/http {/a \    server_names_hash_bucket_size 128;' /etc/nginx/nginx.conf
            else
              sudo sed -i 's/^\(\s*\)#\?\s*server_names_hash_bucket_size.*/\1server_names_hash_bucket_size 128;/' /etc/nginx/nginx.conf
            fi

            NGINX_CONF="/etc/nginx/nginx.conf"
            WEB_DOMAIN="${{ vars.WEB_DOMAIN }}"
            API_DOMAIN="${{ vars.API_DOMAIN }}"

            echo "Creating Nginx config file: $NGINX_CONF"

            sudo tee "$NGINX_CONF" > /dev/null <<EOF
            load_module /usr/lib64/nginx/modules/ngx_stream_module.so;

            worker_processes auto;

            events {
                worker_connections 1024;
            }

            stream {
                upstream express_tls_backend {
                    server 127.0.0.1:3000;
                }

                upstream frontend_https_backend {
                    server 127.0.0.1:8443;
                }

                map \$ssl_preread_server_name \$backend {
                    commercial-bank-api.subspace.site express_tls_backend;
                    commercial-bank.subspace.site frontend_https_backend;
                    default                       frontend_https_backend;
                }

                server {
                    listen 443;
                    listen [::]:443;
                    ssl_preread on;
                    proxy_pass \$backend;
                }
            }

            http {
                include        mime.types;
                default_type   application/octet-stream;

                server_names_hash_bucket_size 128;

                server {
                    listen 80;
                    listen [::]:80;
                    server_name commercial-bank.subspace.site;

                    root /var/www/frontend;
                    index index.html;

                    location / {
                        try_files \$uri /index.html;
                    }
                }

                server {
                    listen 127.0.0.1:8443 ssl;
                    listen [::1]:8443 ssl;

                    server_name commercial-bank.subspace.site;

                    root /var/www/frontend;
                    index index.html;

                    location / {
                        try_files \$uri /index.html;
                    }
                }
            }
            EOF


            echo "Testing and restarting Nginx..."
            sudo systemctl restart nginx || { echo "Nginx configuration failed!"; exit 1; }

            echo "Installing Certbot and requesting SSL certificate..."
            if ! command -v certbot &> /dev/null; then
              sudo yum install -y epel-release
              sudo yum install -y certbot python3-certbot-nginx
            fi

            sudo certbot --nginx --non-interactive --agree-tos --email "$CERTBOT_EMAIL" -d "$API_DOMAIN" -d "$WEB_DOMAIN"

            sudo nginx -t || { echo "Nginx configuration test failed!"; exit 1; }

            echo "Reloading Nginx with SSL..."
            sudo nginx -t && sudo systemctl reload nginx

            # Copy all files except src/, node_modules/, and dist
            echo "Copying runtime files to dist/ ..."
            mkdir -p dist
            rsync -av --exclude='src' --exclude='node_modules' --exclude='dist' ./ dist/

            # Start/restart commercial-bank-api with PM2
            echo "Starting/Restarting commercial-bank-api with PM2..."
            cd dist
            export NODE_ENV=production 
            if pm2 show commercial-bank-api &> /dev/null; then
              pm2 restart commercial-bank-api
            else
              pm2 start server.js --name commercial-bank-api
            fi
            pm2 save

            echo "Deployment complete."
