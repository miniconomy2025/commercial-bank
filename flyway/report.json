{
  "individualResults": [
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 50
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "account number function",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__account_number_function.sql",
          "executionTime": 4
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "generateTransactionNumber",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__generateTransactionNumber.sql",
          "executionTime": 1
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__initial_data.sql",
          "executionTime": 3
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__row_deletion_policy.sql",
          "executionTime": 2
        }
      ],
      "migrationsExecuted": 5,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T17:12:28.227405510",
      "operation": "migrate",
      "exception": "Migration R__utils.sql failed\n-----------------------------\nSQL State  : 42703\nError Code : 0\nMessage    : ERROR: column a.api_key does not exist\n  Position: 668\nLocation   : ./R__utils.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__utils.sql)\nLine       : 118\nStatement  : -- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n-- ðŸ“„ 5. Account Statement View\r\n-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n\r\nCREATE OR REPLACE VIEW account_statement AS\r\nSELECT\r\n    t.transaction_number,\r\n    CASE WHEN ar_to.bank_id \u003d 1 AND ar_to.account_number \u003d a.account_number THEN \u0027incoming\u0027\r\n         ELSE \u0027outgoing\u0027 END AS type,\r\n    t.amount,\r\n    t.description,\r\n    s.name AS status,\r\n    t.created_at AS timestamp,\r\n    a.api_key\r\nFROM transactions t\r\nJOIN transaction_statuses s ON s.id \u003d t.status_id\r\nJOIN account_refs ar_from ON ar_from.id \u003d t.from\r\nJOIN account_refs ar_to ON ar_to.id \u003d t.to\r\nJOIN accounts a ON a.account_number IN (ar_from.account_number, ar_to.account_number) AND a.api_key IS NOT NULL\r\nWHERE a.account_number IN (ar_from.account_number, ar_to.account_number)\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [],
      "migrationsExecuted": 0,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T17:13:08.823660311",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "002",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 51
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "account number function",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__account_number_function.sql",
          "executionTime": 3
        }
      ],
      "migrationsExecuted": 2,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T17:13:49.906293828",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "004",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 55
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql",
          "executionTime": 3
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V003__row_deletion_policy.sql",
          "executionTime": 4
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V004__generate_number_functions.sql",
          "executionTime": 3
        }
      ],
      "migrationsExecuted": 4,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:04:58.313509548",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [],
      "migrationsExecuted": 0,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:42:48.994989134",
      "operation": "migrate",
      "exception": "Migration V001__tables_creation.sql failed\n------------------------------------------\nSQL State  : 42601\nError Code : 0\nMessage    : ERROR: syntax error at or near \")\"\n  Position: 398\nLocation   : ./live/V001__tables_creation.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql)\nLine       : 28\nStatement  : CREATE TABLE transactions (\r\n    id SERIAL PRIMARY KEY,\r\n    transaction_number VARCHAR(32) NOT NULL UNIQUE,\r\n    \"from\" INT NOT NULL REFERENCES account_refs(id),\r\n    \"to\" INT NOT NULL REFERENCES account_refs(id),\r\n    amount NUMERIC(15,2) NOT NULL,\r\n    description VARCHAR(128) NOT NULL,\r\n    status_id INT NOT NULL REFERENCES transaction_statuses(id),\r\n    created_at NUMERIC(9, 3) NOT NULL,\r\n)\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "004",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 57
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql",
          "executionTime": 5
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V003__row_deletion_policy.sql",
          "executionTime": 3
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V004__generate_number_functions.sql",
          "executionTime": 3
        }
      ],
      "migrationsExecuted": 4,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:43:32.538536117",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "004",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 59
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql",
          "executionTime": 5
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V003__row_deletion_policy.sql",
          "executionTime": 6
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V004__generate_number_functions.sql",
          "executionTime": 3
        }
      ],
      "migrationsExecuted": 4,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:46:14.980406004",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 62
        }
      ],
      "migrationsExecuted": 1,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:50:46.827123705",
      "operation": "migrate",
      "exception": "Migration V002__initial_data.sql failed\n---------------------------------------\nSQL State  : 42601\nError Code : 0\nMessage    : ERROR: syntax error at or near \")\"\n  Position: 155\nLocation   : ./live/V002__initial_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql)\nLine       : 2\nStatement  : ---------- Starter data ----------\r\nINSERT INTO transaction_statuses (name) VALUES\r\n  (\u0027success\u0027), \r\n  (\u0027insufficient_funds\u0027), \r\n  (\u0027connection_failed\u0027)\r\n);\r\n\r\nINSERT INTO banks (name, team_id) VALUES (\r\n  (\u0027commercial-bank\u0027, \u0027commercial-bank\u0027)\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 68
        }
      ],
      "migrationsExecuted": 1,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:51:15.455881085",
      "operation": "migrate",
      "exception": "Migration V002__initial_data.sql failed\n---------------------------------------\nSQL State  : 42601\nError Code : 0\nMessage    : ERROR: INSERT has more expressions than target columns\n  Position: 107\nLocation   : ./live/V002__initial_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql)\nLine       : 2\nStatement  : ---------- Starter data ----------\r\nINSERT INTO transaction_statuses (name) VALUES (\r\n  (\u0027success\u0027), \r\n  (\u0027insufficient_funds\u0027), \r\n  (\u0027connection_failed\u0027)\r\n)\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 62
        }
      ],
      "migrationsExecuted": 1,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:52:09.953788657",
      "operation": "migrate",
      "exception": "Migration V002__initial_data.sql failed\n---------------------------------------\nSQL State  : 42601\nError Code : 0\nMessage    : ERROR: syntax error at or near \"\u0027name\u0027\"\n  Position: 71\nLocation   : ./live/V002__initial_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql)\nLine       : 2\nStatement  : ---------- Starter data ----------\r\nINSERT INTO transaction_statuses (\u0027name\u0027) VALUES (\r\n  (\u0027success\u0027), \r\n  (\u0027insufficient_funds\u0027), \r\n  (\u0027connection_failed\u0027)\r\n)\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 62
        }
      ],
      "migrationsExecuted": 1,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:52:17.614190066",
      "operation": "migrate",
      "exception": "Migration V002__initial_data.sql failed\n---------------------------------------\nSQL State  : 42601\nError Code : 0\nMessage    : ERROR: INSERT has more expressions than target columns\n  Position: 107\nLocation   : ./live/V002__initial_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql)\nLine       : 2\nStatement  : ---------- Starter data ----------\r\nINSERT INTO transaction_statuses (name) VALUES (\r\n  (\u0027success\u0027), \r\n  (\u0027insufficient_funds\u0027), \r\n  (\u0027connection_failed\u0027)\r\n)\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 63
        }
      ],
      "migrationsExecuted": 1,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:52:54.344522910",
      "operation": "migrate",
      "exception": "Migration V002__initial_data.sql failed\n---------------------------------------\nSQL State  : 42601\nError Code : 0\nMessage    : ERROR: syntax error at or near \"\u0027retail-bank\u0027\"\n  Position: 1\nLocation   : ./live/V002__initial_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql)\nLine       : 10\nStatement  : \u0027retail-bank\u0027, \u0027retail-bank\u0027),\r\n  (\u0027thoh\u0027, \u0027thoh\u0027)\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "004",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 63
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql",
          "executionTime": 5
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V003__row_deletion_policy.sql",
          "executionTime": 4
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V004__generate_number_functions.sql",
          "executionTime": 3
        }
      ],
      "migrationsExecuted": 4,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T19:53:06.698513943",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 63
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql",
          "executionTime": 5
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/R__generate_number_functions.sql",
          "executionTime": 5
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/R__row_deletion_policy.sql",
          "executionTime": 3
        }
      ],
      "migrationsExecuted": 4,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T20:16:47.680017723",
      "operation": "migrate",
      "exception": "Migration R__utils.sql failed\n-----------------------------\nSQL State  : 42703\nError Code : 0\nMessage    : ERROR: column a.api_key does not exist\n  Position: 668\nLocation   : ./live/R__utils.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/R__utils.sql)\nLine       : 118\nStatement  : -- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n-- ðŸ“„ 5. Account Statement View\r\n-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n\r\nCREATE OR REPLACE VIEW account_statement AS\r\nSELECT\r\n    t.transaction_number,\r\n    CASE WHEN ar_to.bank_id \u003d 1 AND ar_to.account_number \u003d a.account_number THEN \u0027incoming\u0027\r\n         ELSE \u0027outgoing\u0027 END AS type,\r\n    t.amount,\r\n    t.description,\r\n    s.name AS status,\r\n    t.created_at AS timestamp,\r\n    a.api_key\r\nFROM transactions t\r\nJOIN transaction_statuses s ON s.id \u003d t.status_id\r\nJOIN account_refs ar_from ON ar_from.id \u003d t.from\r\nJOIN account_refs ar_to ON ar_to.id \u003d t.to\r\nJOIN accounts a ON a.account_number IN (ar_from.account_number, ar_to.account_number) AND a.api_key IS NOT NULL\r\nWHERE a.account_number IN (ar_from.account_number, ar_to.account_number)\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "002",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V001__tables_creation.sql",
          "executionTime": 58
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/V002__initial_data.sql",
          "executionTime": 3
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/R__generate_number_functions.sql",
          "executionTime": 4
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/R__row_deletion_policy.sql",
          "executionTime": 2
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./live/R__utils.sql",
          "executionTime": 7
        }
      ],
      "migrationsExecuted": 5,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T20:18:22.161078705",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "002",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 68
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 4
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__generate_number_functions.sql",
          "executionTime": 4
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__row_deletion_policy.sql",
          "executionTime": 5
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__utils.sql",
          "executionTime": 10
        }
      ],
      "migrationsExecuted": 5,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T20:32:41.317553966",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "002",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 72
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 6
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__generate_number_functions.sql",
          "executionTime": 6
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__row_deletion_policy.sql",
          "executionTime": 3
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__utils.sql",
          "executionTime": 8
        }
      ],
      "migrationsExecuted": 5,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T21:06:12.137540593",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "002",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 67
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 4
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__generate_number_functions.sql",
          "executionTime": 4
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__row_deletion_policy.sql",
          "executionTime": 3
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__utils.sql",
          "executionTime": 9
        }
      ],
      "migrationsExecuted": 5,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T21:35:12.519411297",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 65
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 4
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__generate_number_functions.sql",
          "executionTime": 5
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__row_deletion_policy.sql",
          "executionTime": 3
        }
      ],
      "migrationsExecuted": 4,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T21:43:32.130321991",
      "operation": "migrate",
      "exception": "Migration R__utils.sql failed\n-----------------------------\nSQL State  : 23503\nError Code : 0\nMessage    : ERROR: Bank \"asdf\" does not exist.\n  Where: PL/pgSQL function get_or_create_account_ref_id(character varying,character varying) line 12 at RAISE\nLocation   : ./R__utils.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__utils.sql)\nLine       : 185\nStatement  : SELECT * FROM get_or_create_account_ref_id(\u0027200000000001\u0027, \u0027asdf\u0027)\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "002",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 63
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 4
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__generate_number_functions.sql",
          "executionTime": 5
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__row_deletion_policy.sql",
          "executionTime": 3
        },
        {
          "category": "Repeatable",
          "version": "",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./R__utils.sql",
          "executionTime": 8
        }
      ],
      "migrationsExecuted": 5,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-02T21:43:47.234875151",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 61
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 6
        }
      ],
      "migrationsExecuted": 2,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T14:41:37.357181517",
      "operation": "migrate",
      "exception": "Migration V003__dummy_data.sql failed\n-------------------------------------\nSQL State  : 42883\nError Code : 0\nMessage    : ERROR: function generate_unique_account_number() does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Where: PL/pgSQL function inline_code_block line 23 at assignment\nLocation   : ./V003__dummy_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__dummy_data.sql)\nLine       : 1\nStatement  : DO $$ \nDECLARE\n    i INT;\n    j INT;\n    acct RECORD;\n    new_account_number VARCHAR(12);\n    new_transaction_number VARCHAR(32);\n    new_loan_number VARCHAR(16);\n    from_ref INT;\n    to_ref INT;\n    txn_id INT;\n    loan_id INT;\n    status_id INT;\n    bank_id INT :\u003d 1;\n    account_ids INT[];\n    team_name TEXT;\n    team_names TEXT[] :\u003d ARRAY[\u0027team-a\u0027, \u0027team-b\u0027, \u0027team-c\u0027, \u0027team-d\u0027, \u0027team-e\u0027];\n    now_ts NUMERIC :\u003d ROUND(EXTRACT(EPOCH FROM NOW()) * 1000);\nBEGIN\n    -- \u003d\u003d\u003d Create 5 accounts with account_refs \u003d\u003d\u003d\n    FOR i IN 1..5 LOOP\n        team_name :\u003d team_names[i];\n        new_account_number :\u003d generate_unique_account_number();\n        INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id INTO acct;\n\n        PERFORM get_or_create_account_ref_id(new_account_number, \u0027commercial-bank\u0027);\n    END LOOP;\n\n    -- \u003d\u003d\u003d Cache created account_ref IDs \u003d\u003d\u003d\n    SELECT ARRAY_AGG(id) INTO account_ids FROM accounts;\n\n    -- \u003d\u003d\u003d Create 100 random transactions \u003d\u003d\u003d\n    FOR i IN 1..100 LOOP\n        -- Get from/to refs\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027); -- base account\n        SELECT get_or_create_account_ref_id(a.account_number, \u0027commercial-bank\u0027) INTO to_ref\n        FROM accounts a\n        WHERE a.id \u003d account_ids[1 + FLOOR(RANDOM() * ARRAY_LENGTH(account_ids, 1))];\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            1,\n            now_ts + i\n        );\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 10 loans with interest + repayments \u003d\u003d\u003d\n    FOR i IN 1..10 LOOP\n        -- Select borrower\n        SELECT id, account_number INTO acct\n        FROM accounts\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Loan disbursement transaction\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n        new_transaction_number :\u003d generate_unique_transaction_number();\n\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 5000 + 1000)::NUMERIC, 2),\n            \u0027Loan Disbursement\u0027,\n            1,\n            now_ts + 1000 + i\n        )\n        RETURNING id INTO txn_id;\n\n        -- Create loan\n        new_loan_number :\u003d generate_unique_loan_number();\n        INSERT INTO loans (loan_number, initial_transaction_id, interest_rate, started_at, write_off)\n        VALUES (\n            new_loan_number,\n            txn_id,\n            ROUND((0.01 + RANDOM() * 0.15)::NUMERIC, 5),\n            now_ts + 1000 + i,\n            FALSE\n        )\n        RETURNING id INTO loan_id;\n\n        -- Create 1â€“3 repayment transactions (some principal, some interest)\n        FOR j IN 1..(1 + FLOOR(RANDOM() * 3)) LOOP\n            from_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n            to_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n            new_transaction_number :\u003d generate_unique_transaction_number();\n\n            INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n            VALUES (\n                new_transaction_number,\n                from_ref,\n                to_ref,\n                ROUND((RANDOM() * 1000 + 100)::NUMERIC, 2),\n                \u0027Loan Repayment #\u0027 || j,\n                1,\n                now_ts + 2000 + i * 10 + j\n            )\n            RETURNING id INTO txn_id;\n\n            INSERT INTO loan_payments (loan_id, transaction_id, is_interest)\n            VALUES (\n                loan_id,\n                txn_id,\n                (RANDOM() \u003e 0.5) -- randomly mark as interest\n            );\n        END LOOP;\n    END LOOP;\nEND;\n$$\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 63
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 6
        }
      ],
      "migrationsExecuted": 2,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T16:00:46.253747910",
      "operation": "migrate",
      "exception": "Migration V003__dummy_data.sql failed\n-------------------------------------\nSQL State  : 42883\nError Code : 0\nMessage    : ERROR: function generate_unique_account_number() does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Where: PL/pgSQL function inline_code_block line 23 at assignment\nLocation   : ./V003__dummy_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__dummy_data.sql)\nLine       : 1\nStatement  : DO $$ \nDECLARE\n    i INT;\n    j INT;\n    acct RECORD;\n    new_account_number VARCHAR(12);\n    new_transaction_number VARCHAR(32);\n    new_loan_number VARCHAR(16);\n    from_ref INT;\n    to_ref INT;\n    txn_id INT;\n    loan_id INT;\n    status_id INT;\n    bank_id INT :\u003d 1;\n    account_ids INT[];\n    team_name TEXT;\n    team_names TEXT[] :\u003d ARRAY[\u0027team-a\u0027, \u0027team-b\u0027, \u0027team-c\u0027, \u0027team-d\u0027, \u0027team-e\u0027];\n    now_ts NUMERIC :\u003d ROUND(EXTRACT(EPOCH FROM NOW()) * 1000);\nBEGIN\n    -- \u003d\u003d\u003d Create 5 accounts with account_refs \u003d\u003d\u003d\n    FOR i IN 1..5 LOOP\n        team_name :\u003d team_names[i];\n        new_account_number :\u003d generate_unique_account_number();\n        INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id INTO acct;\n\n        PERFORM get_or_create_account_ref_id(new_account_number, \u0027commercial-bank\u0027);\n    END LOOP;\n\n    -- \u003d\u003d\u003d Cache created account_ref IDs \u003d\u003d\u003d\n    SELECT ARRAY_AGG(id) INTO account_ids FROM accounts;\n\n    -- \u003d\u003d\u003d Create 100 random transactions \u003d\u003d\u003d\n    FOR i IN 1..100 LOOP\n        -- Get from/to refs\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027); -- base account\n        SELECT get_or_create_account_ref_id(a.account_number, \u0027commercial-bank\u0027) INTO to_ref\n        FROM accounts a\n        WHERE a.id \u003d account_ids[1 + FLOOR(RANDOM() * ARRAY_LENGTH(account_ids, 1))];\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            1,\n            now_ts + i\n        );\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 10 loans with interest + repayments \u003d\u003d\u003d\n    FOR i IN 1..10 LOOP\n        -- Select borrower\n        SELECT id, account_number INTO acct\n        FROM accounts\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Loan disbursement transaction\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n        new_transaction_number :\u003d generate_unique_transaction_number();\n\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 5000 + 1000)::NUMERIC, 2),\n            \u0027Loan Disbursement\u0027,\n            1,\n            now_ts + 1000 + i\n        )\n        RETURNING id INTO txn_id;\n\n        -- Create loan\n        new_loan_number :\u003d generate_unique_loan_number();\n        INSERT INTO loans (loan_number, initial_transaction_id, interest_rate, started_at, write_off)\n        VALUES (\n            new_loan_number,\n            txn_id,\n            ROUND((0.01 + RANDOM() * 0.15)::NUMERIC, 5),\n            now_ts + 1000 + i,\n            FALSE\n        )\n        RETURNING id INTO loan_id;\n\n        -- Create 1â€“3 repayment transactions (some principal, some interest)\n        FOR j IN 1..(1 + FLOOR(RANDOM() * 3)) LOOP\n            from_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n            to_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n            new_transaction_number :\u003d generate_unique_transaction_number();\n\n            INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n            VALUES (\n                new_transaction_number,\n                from_ref,\n                to_ref,\n                ROUND((RANDOM() * 1000 + 100)::NUMERIC, 2),\n                \u0027Loan Repayment #\u0027 || j,\n                1,\n                now_ts + 2000 + i * 10 + j\n            )\n            RETURNING id INTO txn_id;\n\n            INSERT INTO loan_payments (loan_id, transaction_id, is_interest)\n            VALUES (\n                loan_id,\n                txn_id,\n                (RANDOM() \u003e 0.5) -- randomly mark as interest\n            );\n        END LOOP;\n    END LOOP;\nEND;\n$$\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 58
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 5
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__row_deletion_policy.sql",
          "executionTime": 5
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V004__generate_number_functions.sql",
          "executionTime": 4
        },
        {
          "category": "Versioned",
          "version": "005",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V005__utils.sql",
          "executionTime": 10
        }
      ],
      "migrationsExecuted": 5,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T16:03:18.121948783",
      "operation": "migrate",
      "exception": "Migration V006__dummy_data.sql failed\n-------------------------------------\nSQL State  : 22003\nError Code : 0\nMessage    : ERROR: numeric field overflow\n  Detail: A field with precision 9, scale 3 must round to an absolute value less than 10^6.\n  Where: SQL statement \"INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id\"\nPL/pgSQL function inline_code_block line 24 at SQL statement\nLocation   : ./V006__dummy_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V006__dummy_data.sql)\nLine       : 1\nStatement  : DO $$ \nDECLARE\n    i INT;\n    j INT;\n    acct RECORD;\n    new_account_number VARCHAR(12);\n    new_transaction_number VARCHAR(32);\n    new_loan_number VARCHAR(16);\n    from_ref INT;\n    to_ref INT;\n    txn_id INT;\n    loan_id INT;\n    status_id INT;\n    bank_id INT :\u003d 1;\n    account_ids INT[];\n    team_name TEXT;\n    team_names TEXT[] :\u003d ARRAY[\u0027team-a\u0027, \u0027team-b\u0027, \u0027team-c\u0027, \u0027team-d\u0027, \u0027team-e\u0027];\n    now_ts NUMERIC :\u003d ROUND(EXTRACT(EPOCH FROM NOW()) * 1000);\nBEGIN\n    -- \u003d\u003d\u003d Create 5 accounts with account_refs \u003d\u003d\u003d\n    FOR i IN 1..5 LOOP\n        team_name :\u003d team_names[i];\n        new_account_number :\u003d generate_unique_account_number();\n        INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id INTO acct;\n\n        PERFORM get_or_create_account_ref_id(new_account_number, \u0027commercial-bank\u0027);\n    END LOOP;\n\n    -- \u003d\u003d\u003d Cache created account_ref IDs \u003d\u003d\u003d\n    SELECT ARRAY_AGG(id) INTO account_ids FROM accounts;\n\n    -- \u003d\u003d\u003d Create 100 random transactions \u003d\u003d\u003d\n    FOR i IN 1..100 LOOP\n        -- Get from/to refs\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027); -- base account\n        SELECT get_or_create_account_ref_id(a.account_number, \u0027commercial-bank\u0027) INTO to_ref\n        FROM accounts a\n        WHERE a.id \u003d account_ids[1 + FLOOR(RANDOM() * ARRAY_LENGTH(account_ids, 1))];\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            1,\n            now_ts + i\n        );\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 10 loans with interest + repayments \u003d\u003d\u003d\n    FOR i IN 1..10 LOOP\n        -- Select borrower\n        SELECT id, account_number INTO acct\n        FROM accounts\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Loan disbursement transaction\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n        new_transaction_number :\u003d generate_unique_transaction_number();\n\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 5000 + 1000)::NUMERIC, 2),\n            \u0027Loan Disbursement\u0027,\n            1,\n            now_ts + 1000 + i\n        )\n        RETURNING id INTO txn_id;\n\n        -- Create loan\n        new_loan_number :\u003d generate_unique_loan_number();\n        INSERT INTO loans (loan_number, initial_transaction_id, interest_rate, started_at, write_off)\n        VALUES (\n            new_loan_number,\n            txn_id,\n            ROUND((0.01 + RANDOM() * 0.15)::NUMERIC, 5),\n            now_ts + 1000 + i,\n            FALSE\n        )\n        RETURNING id INTO loan_id;\n\n        -- Create 1â€“3 repayment transactions (some principal, some interest)\n        FOR j IN 1..(1 + FLOOR(RANDOM() * 3)) LOOP\n            from_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n            to_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n            new_transaction_number :\u003d generate_unique_transaction_number();\n\n            INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n            VALUES (\n                new_transaction_number,\n                from_ref,\n                to_ref,\n                ROUND((RANDOM() * 1000 + 100)::NUMERIC, 2),\n                \u0027Loan Repayment #\u0027 || j,\n                1,\n                now_ts + 2000 + i * 10 + j\n            )\n            RETURNING id INTO txn_id;\n\n            INSERT INTO loan_payments (loan_id, transaction_id, is_interest)\n            VALUES (\n                loan_id,\n                txn_id,\n                (RANDOM() \u003e 0.5) -- randomly mark as interest\n            );\n        END LOOP;\n    END LOOP;\nEND;\n$$\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 58
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 5
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__row_deletion_policy.sql",
          "executionTime": 4
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V004__generate_number_functions.sql",
          "executionTime": 3
        },
        {
          "category": "Versioned",
          "version": "005",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V005__utils.sql",
          "executionTime": 9
        }
      ],
      "migrationsExecuted": 5,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T16:03:37.107283638",
      "operation": "migrate",
      "exception": "Migration V006__dummy_data.sql failed\n-------------------------------------\nSQL State  : 22003\nError Code : 0\nMessage    : ERROR: numeric field overflow\n  Detail: A field with precision 9, scale 3 must round to an absolute value less than 10^6.\n  Where: SQL statement \"INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id\"\nPL/pgSQL function inline_code_block line 24 at SQL statement\nLocation   : ./V006__dummy_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V006__dummy_data.sql)\nLine       : 1\nStatement  : DO $$ \nDECLARE\n    i INT;\n    j INT;\n    acct RECORD;\n    new_account_number VARCHAR(12);\n    new_transaction_number VARCHAR(32);\n    new_loan_number VARCHAR(16);\n    from_ref INT;\n    to_ref INT;\n    txn_id INT;\n    loan_id INT;\n    status_id INT;\n    bank_id INT :\u003d 1;\n    account_ids INT[];\n    team_name TEXT;\n    team_names TEXT[] :\u003d ARRAY[\u0027team-a\u0027, \u0027team-b\u0027, \u0027team-c\u0027, \u0027team-d\u0027, \u0027team-e\u0027];\n    now_ts NUMERIC :\u003d ROUND(EXTRACT(EPOCH FROM NOW()) * 1000);\nBEGIN\n    -- \u003d\u003d\u003d Create 5 accounts with account_refs \u003d\u003d\u003d\n    FOR i IN 1..5 LOOP\n        team_name :\u003d team_names[i];\n        new_account_number :\u003d generate_unique_account_number();\n        INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id INTO acct;\n\n        PERFORM get_or_create_account_ref_id(new_account_number, \u0027commercial-bank\u0027);\n    END LOOP;\n\n    -- \u003d\u003d\u003d Cache created account_ref IDs \u003d\u003d\u003d\n    SELECT ARRAY_AGG(id) INTO account_ids FROM accounts;\n\n    -- \u003d\u003d\u003d Create 100 random transactions \u003d\u003d\u003d\n    FOR i IN 1..100 LOOP\n        -- Get from/to refs\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027); -- base account\n        SELECT get_or_create_account_ref_id(a.account_number, \u0027commercial-bank\u0027) INTO to_ref\n        FROM accounts a\n        WHERE a.id \u003d account_ids[1 + FLOOR(RANDOM() * ARRAY_LENGTH(account_ids, 1))];\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            1,\n            now_ts + i\n        );\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 10 loans with interest + repayments \u003d\u003d\u003d\n    FOR i IN 1..10 LOOP\n        -- Select borrower\n        SELECT id, account_number INTO acct\n        FROM accounts\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Loan disbursement transaction\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n        new_transaction_number :\u003d generate_unique_transaction_number();\n\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 5000 + 1000)::NUMERIC, 2),\n            \u0027Loan Disbursement\u0027,\n            1,\n            now_ts + 1000 + i\n        )\n        RETURNING id INTO txn_id;\n\n        -- Create loan\n        new_loan_number :\u003d generate_unique_loan_number();\n        INSERT INTO loans (loan_number, initial_transaction_id, interest_rate, started_at, write_off)\n        VALUES (\n            new_loan_number,\n            txn_id,\n            ROUND((0.01 + RANDOM() * 0.15)::NUMERIC, 5),\n            now_ts + 1000 + i,\n            FALSE\n        )\n        RETURNING id INTO loan_id;\n\n        -- Create 1â€“3 repayment transactions (some principal, some interest)\n        FOR j IN 1..(1 + FLOOR(RANDOM() * 3)) LOOP\n            from_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n            to_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n            new_transaction_number :\u003d generate_unique_transaction_number();\n\n            INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n            VALUES (\n                new_transaction_number,\n                from_ref,\n                to_ref,\n                ROUND((RANDOM() * 1000 + 100)::NUMERIC, 2),\n                \u0027Loan Repayment #\u0027 || j,\n                1,\n                now_ts + 2000 + i * 10 + j\n            )\n            RETURNING id INTO txn_id;\n\n            INSERT INTO loan_payments (loan_id, transaction_id, is_interest)\n            VALUES (\n                loan_id,\n                txn_id,\n                (RANDOM() \u003e 0.5) -- randomly mark as interest\n            );\n        END LOOP;\n    END LOOP;\nEND;\n$$\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 61
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 6
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__row_deletion_policy.sql",
          "executionTime": 4
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V004__generate_number_functions.sql",
          "executionTime": 3
        },
        {
          "category": "Versioned",
          "version": "005",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V005__utils.sql",
          "executionTime": 10
        }
      ],
      "migrationsExecuted": 5,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T16:05:06.592018776",
      "operation": "migrate",
      "exception": "Migration V006__dummy_data.sql failed\n-------------------------------------\nSQL State  : 42883\nError Code : 0\nMessage    : ERROR: function round(double precision, integer) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Where: PL/pgSQL function inline_code_block line 18 during statement block local variable initialization\nLocation   : ./V006__dummy_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V006__dummy_data.sql)\nLine       : 1\nStatement  : DO $$ \nDECLARE\n    i INT;\n    j INT;\n    acct RECORD;\n    new_account_number VARCHAR(12);\n    new_transaction_number VARCHAR(32);\n    new_loan_number VARCHAR(16);\n    from_ref INT;\n    to_ref INT;\n    txn_id INT;\n    loan_id INT;\n    status_id INT;\n    bank_id INT :\u003d 1;\n    account_ids INT[];\n    team_name TEXT;\n    team_names TEXT[] :\u003d ARRAY[\u0027team-a\u0027, \u0027team-b\u0027, \u0027team-c\u0027, \u0027team-d\u0027, \u0027team-e\u0027];\n    now_ts NUMERIC :\u003d ROUND(RANDOM() * 100000, 3);\nBEGIN\n    -- \u003d\u003d\u003d Create 5 accounts with account_refs \u003d\u003d\u003d\n    FOR i IN 1..5 LOOP\n        team_name :\u003d team_names[i];\n        new_account_number :\u003d generate_unique_account_number();\n        INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id INTO acct;\n\n        PERFORM get_or_create_account_ref_id(new_account_number, \u0027commercial-bank\u0027);\n    END LOOP;\n\n    -- \u003d\u003d\u003d Cache created account_ref IDs \u003d\u003d\u003d\n    SELECT ARRAY_AGG(id) INTO account_ids FROM accounts;\n\n    -- \u003d\u003d\u003d Create 100 random transactions \u003d\u003d\u003d\n    FOR i IN 1..100 LOOP\n        -- Get from/to refs\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027); -- base account\n        SELECT get_or_create_account_ref_id(a.account_number, \u0027commercial-bank\u0027) INTO to_ref\n        FROM accounts a\n        WHERE a.id \u003d account_ids[1 + FLOOR(RANDOM() * ARRAY_LENGTH(account_ids, 1))];\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            1,\n            now_ts + i\n        );\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 10 loans with interest + repayments \u003d\u003d\u003d\n    FOR i IN 1..10 LOOP\n        -- Select borrower\n        SELECT id, account_number INTO acct\n        FROM accounts\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Loan disbursement transaction\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n        new_transaction_number :\u003d generate_unique_transaction_number();\n\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 5000 + 1000)::NUMERIC, 2),\n            \u0027Loan Disbursement\u0027,\n            1,\n            now_ts + 1000 + i\n        )\n        RETURNING id INTO txn_id;\n\n        -- Create loan\n        new_loan_number :\u003d generate_unique_loan_number();\n        INSERT INTO loans (loan_number, initial_transaction_id, interest_rate, started_at, write_off)\n        VALUES (\n            new_loan_number,\n            txn_id,\n            ROUND((0.01 + RANDOM() * 0.15)::NUMERIC, 5),\n            now_ts + 1000 + i,\n            FALSE\n        )\n        RETURNING id INTO loan_id;\n\n        -- Create 1â€“3 repayment transactions (some principal, some interest)\n        FOR j IN 1..(1 + FLOOR(RANDOM() * 3)) LOOP\n            from_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n            to_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n            new_transaction_number :\u003d generate_unique_transaction_number();\n\n            INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n            VALUES (\n                new_transaction_number,\n                from_ref,\n                to_ref,\n                ROUND((RANDOM() * 1000 + 100)::NUMERIC, 2),\n                \u0027Loan Repayment #\u0027 || j,\n                1,\n                now_ts + 2000 + i * 10 + j\n            )\n            RETURNING id INTO txn_id;\n\n            INSERT INTO loan_payments (loan_id, transaction_id, is_interest)\n            VALUES (\n                loan_id,\n                txn_id,\n                (RANDOM() \u003e 0.5) -- randomly mark as interest\n            );\n        END LOOP;\n    END LOOP;\nEND;\n$$\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 57
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 6
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__row_deletion_policy.sql",
          "executionTime": 4
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V004__generate_number_functions.sql",
          "executionTime": 3
        },
        {
          "category": "Versioned",
          "version": "005",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V005__utils.sql",
          "executionTime": 10
        }
      ],
      "migrationsExecuted": 5,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T16:06:11.087669316",
      "operation": "migrate",
      "exception": "Migration V006__dummy_data.sql failed\n-------------------------------------\nSQL State  : 23502\nError Code : 0\nMessage    : ERROR: null value in column \"to\" of relation \"transactions\" violates not-null constraint\n  Detail: Failing row contains (5, 2753761434991442, 1, null, 9419.97, Dummy TXN #5, 1, 548.969).\n  Where: SQL statement \"INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            1,\n            now_ts + i\n        )\"\nPL/pgSQL function inline_code_block line 43 at SQL statement\nLocation   : ./V006__dummy_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V006__dummy_data.sql)\nLine       : 1\nStatement  : DO $$ \nDECLARE\n    i INT;\n    j INT;\n    acct RECORD;\n    new_account_number VARCHAR(12);\n    new_transaction_number VARCHAR(32);\n    new_loan_number VARCHAR(16);\n    from_ref INT;\n    to_ref INT;\n    txn_id INT;\n    loan_id INT;\n    status_id INT;\n    bank_id INT :\u003d 1;\n    account_ids INT[];\n    team_name TEXT;\n    team_names TEXT[] :\u003d ARRAY[\u0027team-a\u0027, \u0027team-b\u0027, \u0027team-c\u0027, \u0027team-d\u0027, \u0027team-e\u0027];\n    now_ts NUMERIC :\u003d ROUND(RANDOM() * 1000000) / 1000;\nBEGIN\n    -- \u003d\u003d\u003d Create 5 accounts with account_refs \u003d\u003d\u003d\n    FOR i IN 1..5 LOOP\n        team_name :\u003d team_names[i];\n        new_account_number :\u003d generate_unique_account_number();\n        INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id INTO acct;\n\n        PERFORM get_or_create_account_ref_id(new_account_number, \u0027commercial-bank\u0027);\n    END LOOP;\n\n    -- \u003d\u003d\u003d Cache created account_ref IDs \u003d\u003d\u003d\n    SELECT ARRAY_AGG(id) INTO account_ids FROM accounts;\n\n    -- \u003d\u003d\u003d Create 100 random transactions \u003d\u003d\u003d\n    FOR i IN 1..100 LOOP\n        -- Get from/to refs\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027); -- base account\n        SELECT get_or_create_account_ref_id(a.account_number, \u0027commercial-bank\u0027) INTO to_ref\n        FROM accounts a\n        WHERE a.id \u003d account_ids[1 + FLOOR(RANDOM() * ARRAY_LENGTH(account_ids, 1))];\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            1,\n            now_ts + i\n        );\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 10 loans with interest + repayments \u003d\u003d\u003d\n    FOR i IN 1..10 LOOP\n        -- Select borrower\n        SELECT id, account_number INTO acct\n        FROM accounts\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Loan disbursement transaction\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n        new_transaction_number :\u003d generate_unique_transaction_number();\n\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 5000 + 1000)::NUMERIC, 2),\n            \u0027Loan Disbursement\u0027,\n            1,\n            now_ts + 1000 + i\n        )\n        RETURNING id INTO txn_id;\n\n        -- Create loan\n        new_loan_number :\u003d generate_unique_loan_number();\n        INSERT INTO loans (loan_number, initial_transaction_id, interest_rate, started_at, write_off)\n        VALUES (\n            new_loan_number,\n            txn_id,\n            ROUND((0.01 + RANDOM() * 0.15)::NUMERIC, 5),\n            now_ts + 1000 + i,\n            FALSE\n        )\n        RETURNING id INTO loan_id;\n\n        -- Create 1â€“3 repayment transactions (some principal, some interest)\n        FOR j IN 1..(1 + FLOOR(RANDOM() * 3)) LOOP\n            from_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n            to_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n            new_transaction_number :\u003d generate_unique_transaction_number();\n\n            INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n            VALUES (\n                new_transaction_number,\n                from_ref,\n                to_ref,\n                ROUND((RANDOM() * 1000 + 100)::NUMERIC, 2),\n                \u0027Loan Repayment #\u0027 || j,\n                1,\n                now_ts + 2000 + i * 10 + j\n            )\n            RETURNING id INTO txn_id;\n\n            INSERT INTO loan_payments (loan_id, transaction_id, is_interest)\n            VALUES (\n                loan_id,\n                txn_id,\n                (RANDOM() \u003e 0.5) -- randomly mark as interest\n            );\n        END LOOP;\n    END LOOP;\nEND;\n$$\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 57
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 5
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__row_deletion_policy.sql",
          "executionTime": 4
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V004__generate_number_functions.sql",
          "executionTime": 2
        },
        {
          "category": "Versioned",
          "version": "005",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V005__utils.sql",
          "executionTime": 7
        }
      ],
      "migrationsExecuted": 5,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T16:08:03.544672099",
      "operation": "migrate",
      "exception": "Migration V006__dummy_data.sql failed\n-------------------------------------\nSQL State  : 42703\nError Code : 0\nMessage    : ERROR: record \"acct\" has no field \"account_number\"\n  Where: PL/pgSQL function inline_code_block line 42 at SQL statement\nLocation   : ./V006__dummy_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V006__dummy_data.sql)\nLine       : 1\nStatement  : DO $$ \nDECLARE\n    i INT;\n    j INT;\n    acct RECORD;\n    new_account_number VARCHAR(12);\n    new_transaction_number VARCHAR(32);\n    new_loan_number VARCHAR(16);\n    from_ref INT;\n    to_ref INT;\n    txn_id INT;\n    loan_id INT;\n    status_id INT;\n    bank_id INT :\u003d 1;\n    account_ids INT[];\n    team_name TEXT;\n    team_names TEXT[] :\u003d ARRAY[\u0027team-a\u0027, \u0027team-b\u0027, \u0027team-c\u0027, \u0027team-d\u0027, \u0027team-e\u0027];\n    now_ts NUMERIC :\u003d ROUND(RANDOM() * 1000000) / 1000;\nBEGIN\n    -- \u003d\u003d\u003d Create 5 accounts with account_refs \u003d\u003d\u003d\n    FOR i IN 1..5 LOOP\n        team_name :\u003d team_names[i];\n        new_account_number :\u003d generate_unique_account_number();\n        INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id INTO acct;\n\n        PERFORM get_or_create_account_ref_id(new_account_number, \u0027commercial-bank\u0027);\n    END LOOP;\n\n    -- \u003d\u003d\u003d Cache created account_ref IDs \u003d\u003d\u003d\n    SELECT ARRAY_AGG(id) INTO account_ids FROM accounts;\n\n    -- \u003d\u003d\u003d Create 100 random transactions \u003d\u003d\u003d\n    FOR i IN 1..100 LOOP\n        -- -- Get from/to refs\n        -- from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027); -- base account\n        -- SELECT get_or_create_account_ref_id(a.account_number, \u0027commercial-bank\u0027) INTO to_ref\n        -- FROM accounts a\n        -- WHERE a.id \u003d account_ids[1 + FLOOR(RANDOM() * ARRAY_LENGTH(account_ids, 1))];\n        -- Choose a random account\n        SELECT a.account_number INTO STRICT acct.account_number\n        FROM accounts a\n        WHERE a.account_number !\u003d \u0027200000000000\u0027 -- avoid sending to base account\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Generate or get account_ref\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n\n        -- Skip iteration if ref is still null (defensive, shouldn\u0027t happen)\n        IF to_ref IS NULL THEN\n        CONTINUE;\n        END IF;\n\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            1,\n            now_ts + i\n        );\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 10 loans with interest + repayments \u003d\u003d\u003d\n    FOR i IN 1..10 LOOP\n        -- Select borrower\n        SELECT id, account_number INTO acct\n        FROM accounts\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Loan disbursement transaction\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n        new_transaction_number :\u003d generate_unique_transaction_number();\n\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 5000 + 1000)::NUMERIC, 2),\n            \u0027Loan Disbursement\u0027,\n            1,\n            now_ts + 1000 + i\n        )\n        RETURNING id INTO txn_id;\n\n        -- Create loan\n        new_loan_number :\u003d generate_unique_loan_number();\n        INSERT INTO loans (loan_number, initial_transaction_id, interest_rate, started_at, write_off)\n        VALUES (\n            new_loan_number,\n            txn_id,\n            ROUND((0.01 + RANDOM() * 0.15)::NUMERIC, 5),\n            now_ts + 1000 + i,\n            FALSE\n        )\n        RETURNING id INTO loan_id;\n\n        -- Create 1â€“3 repayment transactions (some principal, some interest)\n        FOR j IN 1..(1 + FLOOR(RANDOM() * 3)) LOOP\n            from_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n            to_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n            new_transaction_number :\u003d generate_unique_transaction_number();\n\n            INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n            VALUES (\n                new_transaction_number,\n                from_ref,\n                to_ref,\n                ROUND((RANDOM() * 1000 + 100)::NUMERIC, 2),\n                \u0027Loan Repayment #\u0027 || j,\n                1,\n                now_ts + 2000 + i * 10 + j\n            )\n            RETURNING id INTO txn_id;\n\n            INSERT INTO loan_payments (loan_id, transaction_id, is_interest)\n            VALUES (\n                loan_id,\n                txn_id,\n                (RANDOM() \u003e 0.5) -- randomly mark as interest\n            );\n        END LOOP;\n    END LOOP;\nEND;\n$$\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 57
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 6
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__row_deletion_policy.sql",
          "executionTime": 3
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V004__generate_number_functions.sql",
          "executionTime": 4
        },
        {
          "category": "Versioned",
          "version": "005",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V005__utils.sql",
          "executionTime": 9
        }
      ],
      "migrationsExecuted": 5,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T16:08:22.237669096",
      "operation": "migrate",
      "exception": "Migration V006__dummy_data.sql failed\n-------------------------------------\nSQL State  : 42703\nError Code : 0\nMessage    : ERROR: record \"acct\" has no field \"account_number\"\n  Where: PL/pgSQL function inline_code_block line 37 at SQL statement\nLocation   : ./V006__dummy_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V006__dummy_data.sql)\nLine       : 1\nStatement  : DO $$ \nDECLARE\n    i INT;\n    j INT;\n    acct RECORD;\n    new_account_number VARCHAR(12);\n    new_transaction_number VARCHAR(32);\n    new_loan_number VARCHAR(16);\n    from_ref INT;\n    to_ref INT;\n    txn_id INT;\n    loan_id INT;\n    status_id INT;\n    bank_id INT :\u003d 1;\n    account_ids INT[];\n    team_name TEXT;\n    team_names TEXT[] :\u003d ARRAY[\u0027team-a\u0027, \u0027team-b\u0027, \u0027team-c\u0027, \u0027team-d\u0027, \u0027team-e\u0027];\n    now_ts NUMERIC :\u003d ROUND(RANDOM() * 1000000) / 1000;\nBEGIN\n    -- \u003d\u003d\u003d Create 5 accounts with account_refs \u003d\u003d\u003d\n    FOR i IN 1..5 LOOP\n        team_name :\u003d team_names[i];\n        new_account_number :\u003d generate_unique_account_number();\n        INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (new_account_number, team_name, \u0027\u0027, now_ts + i)\n        RETURNING id INTO acct;\n\n        PERFORM get_or_create_account_ref_id(new_account_number, \u0027commercial-bank\u0027);\n    END LOOP;\n\n    -- \u003d\u003d\u003d Cache created account_ref IDs \u003d\u003d\u003d\n    SELECT ARRAY_AGG(id) INTO account_ids FROM accounts;\n\n    -- \u003d\u003d\u003d Create 100 random transactions \u003d\u003d\u003d\n    FOR i IN 1..100 LOOP\n        -- Choose a random account\n        SELECT a.account_number INTO STRICT acct.account_number\n        FROM accounts a\n        WHERE a.account_number !\u003d \u0027200000000000\u0027 -- avoid sending to base account\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Generate or get account_ref\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n\n        -- Skip iteration if ref is still null (defensive, shouldn\u0027t happen)\n        IF to_ref IS NULL THEN\n        CONTINUE;\n        END IF;\n\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            1,\n            now_ts + i\n        );\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 10 loans with interest + repayments \u003d\u003d\u003d\n    FOR i IN 1..10 LOOP\n        -- Select borrower\n        SELECT id, account_number INTO acct\n        FROM accounts\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Loan disbursement transaction\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n        new_transaction_number :\u003d generate_unique_transaction_number();\n\n        INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 5000 + 1000)::NUMERIC, 2),\n            \u0027Loan Disbursement\u0027,\n            1,\n            now_ts + 1000 + i\n        )\n        RETURNING id INTO txn_id;\n\n        -- Create loan\n        new_loan_number :\u003d generate_unique_loan_number();\n        INSERT INTO loans (loan_number, initial_transaction_id, interest_rate, started_at, write_off)\n        VALUES (\n            new_loan_number,\n            txn_id,\n            ROUND((0.01 + RANDOM() * 0.15)::NUMERIC, 5),\n            now_ts + 1000 + i,\n            FALSE\n        )\n        RETURNING id INTO loan_id;\n\n        -- Create 1â€“3 repayment transactions (some principal, some interest)\n        FOR j IN 1..(1 + FLOOR(RANDOM() * 3)) LOOP\n            from_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n            to_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n            new_transaction_number :\u003d generate_unique_transaction_number();\n\n            INSERT INTO transactions (transaction_number, \"from\", \"to\", amount, description, status_id, created_at)\n            VALUES (\n                new_transaction_number,\n                from_ref,\n                to_ref,\n                ROUND((RANDOM() * 1000 + 100)::NUMERIC, 2),\n                \u0027Loan Repayment #\u0027 || j,\n                1,\n                now_ts + 2000 + i * 10 + j\n            )\n            RETURNING id INTO txn_id;\n\n            INSERT INTO loan_payments (loan_id, transaction_id, is_interest)\n            VALUES (\n                loan_id,\n                txn_id,\n                (RANDOM() \u003e 0.5) -- randomly mark as interest\n            );\n        END LOOP;\n    END LOOP;\nEND;\n$$\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": null,
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 60
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 7
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__row_deletion_policy.sql",
          "executionTime": 5
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V004__generate_number_functions.sql",
          "executionTime": 3
        },
        {
          "category": "Versioned",
          "version": "005",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V005__utils.sql",
          "executionTime": 8
        }
      ],
      "migrationsExecuted": 5,
      "success": false,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T16:09:41.915245248",
      "operation": "migrate",
      "exception": "Migration V006__dummy_data.sql failed\n-------------------------------------\nSQL State  : 42883\nError Code : 0\nMessage    : ERROR: function round(double precision, integer) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Where: PL/pgSQL function inline_code_block line 20 at SQL statement\nLocation   : ./V006__dummy_data.sql (/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V006__dummy_data.sql)\nLine       : 1\nStatement  : DO $$ \nDECLARE\n    i INT;\n    j INT;\n    acct RECORD;\n    new_account_number VARCHAR(12);\n    new_transaction_number VARCHAR(32);\n    new_loan_number VARCHAR(16);\n    from_ref INT;\n    to_ref INT;\n    txn_id INT;\n    loan_id INT;\n    status_id INT :\u003d 1; -- success\n    bank_id INT :\u003d 1;\n    team_names TEXT[] :\u003d ARRAY[\u0027team-a\u0027, \u0027team-b\u0027, \u0027team-c\u0027, \u0027team-d\u0027, \u0027team-e\u0027];\nBEGIN\n    -- \u003d\u003d\u003d Create 5 accounts with account_refs \u003d\u003d\u003d\n    FOR i IN 1..5 LOOP\n        new_account_number :\u003d generate_unique_account_number();\n        INSERT INTO accounts (account_number, team_id, notification_url, created_at)\n        VALUES (\n            new_account_number,\n            team_names[i],\n            \u0027\u0027,\n            ROUND(RANDOM() * 100000, 3)\n        );\n\n        PERFORM get_or_create_account_ref_id(new_account_number, \u0027commercial-bank\u0027);\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 100 random transactions \u003d\u003d\u003d\n    FOR i IN 1..100 LOOP\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n\n        SELECT get_or_create_account_ref_id(a.account_number, \u0027commercial-bank\u0027) INTO to_ref\n        FROM accounts a\n        WHERE a.account_number !\u003d \u0027200000000000\u0027\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        IF to_ref IS NULL THEN\n            CONTINUE;\n        END IF;\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (\n            transaction_number, \"from\", \"to\", amount, description, status_id, created_at\n        )\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 10000 + 100)::NUMERIC, 2),\n            \u0027Dummy TXN #\u0027 || i,\n            status_id,\n            ROUND(RANDOM() * 100000, 3)\n        );\n    END LOOP;\n\n    -- \u003d\u003d\u003d Create 10 loans with interest + repayments \u003d\u003d\u003d\n    FOR i IN 1..10 LOOP\n        -- Choose random borrower\n        SELECT id, account_number INTO acct\n        FROM accounts\n        WHERE account_number !\u003d \u0027200000000000\u0027\n        ORDER BY RANDOM()\n        LIMIT 1;\n\n        -- Loan disbursement transaction\n        from_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n        to_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n\n        new_transaction_number :\u003d generate_unique_transaction_number();\n        INSERT INTO transactions (\n            transaction_number, \"from\", \"to\", amount, description, status_id, created_at\n        )\n        VALUES (\n            new_transaction_number,\n            from_ref,\n            to_ref,\n            ROUND((RANDOM() * 5000 + 1000)::NUMERIC, 2),\n            \u0027Loan Disbursement\u0027,\n            status_id,\n            ROUND(RANDOM() * 100000, 3)\n        )\n        RETURNING id INTO txn_id;\n\n        -- Create loan\n        new_loan_number :\u003d generate_unique_loan_number();\n        INSERT INTO loans (\n            loan_number, initial_transaction_id, interest_rate, started_at, write_off\n        )\n        VALUES (\n            new_loan_number,\n            txn_id,\n            ROUND((0.01 + RANDOM() * 0.15)::NUMERIC, 5),\n            ROUND(RANDOM() * 100000, 3),\n            FALSE\n        )\n        RETURNING id INTO loan_id;\n\n        -- Create 1â€“3 loan repayment transactions\n        FOR j IN 1..(1 + FLOOR(RANDOM() * 3)) LOOP\n            from_ref :\u003d get_or_create_account_ref_id(acct.account_number, \u0027commercial-bank\u0027);\n            to_ref :\u003d get_or_create_account_ref_id(\u0027200000000000\u0027, \u0027commercial-bank\u0027);\n            new_transaction_number :\u003d generate_unique_transaction_number();\n\n            INSERT INTO transactions (\n                transaction_number, \"from\", \"to\", amount, description, status_id, created_at\n            )\n            VALUES (\n                new_transaction_number,\n                from_ref,\n                to_ref,\n                ROUND((RANDOM() * 1000 + 100)::NUMERIC, 2),\n                \u0027Loan Repayment #\u0027 || j,\n                status_id,\n                ROUND(RANDOM() * 100000, 3)\n            )\n            RETURNING id INTO txn_id;\n\n            INSERT INTO loan_payments (\n                loan_id, transaction_id, is_interest\n            )\n            VALUES (\n                loan_id,\n                txn_id,\n                (RANDOM() \u003e 0.5)\n            );\n        END LOOP;\n    END LOOP;\nEND;\n$$\n",
      "licenseFailed": false
    },
    {
      "initialSchemaVersion": null,
      "targetSchemaVersion": "006",
      "schemaName": "public",
      "migrations": [
        {
          "category": "Versioned",
          "version": "001",
          "description": "tables creation",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V001__tables_creation.sql",
          "executionTime": 59
        },
        {
          "category": "Versioned",
          "version": "002",
          "description": "initial data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V002__initial_data.sql",
          "executionTime": 6
        },
        {
          "category": "Versioned",
          "version": "003",
          "description": "row deletion policy",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V003__row_deletion_policy.sql",
          "executionTime": 3
        },
        {
          "category": "Versioned",
          "version": "004",
          "description": "generate number functions",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V004__generate_number_functions.sql",
          "executionTime": 3
        },
        {
          "category": "Versioned",
          "version": "005",
          "description": "utils",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V005__utils.sql",
          "executionTime": 7
        },
        {
          "category": "Versioned",
          "version": "006",
          "description": "dummy data",
          "type": "SQL",
          "filepath": "/home/rec1dite/grad/miniconomy/commercial-bank/flyway/./V006__dummy_data.sql",
          "executionTime": 17
        }
      ],
      "migrationsExecuted": 6,
      "success": true,
      "flywayVersion": "9.22.3",
      "database": "bank_db",
      "warnings": [],
      "timestamp": "2025-07-03T16:10:37.715768218",
      "operation": "migrate",
      "exception": null,
      "licenseFailed": false
    }
  ]
}